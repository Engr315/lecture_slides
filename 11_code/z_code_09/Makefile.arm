CC      := arm-none-eabi-gcc
AS 		:= arm-none-eabi-as
LD		:= arm-none-eabi-ld
OBJCOPY :=	arm-none-eabi-objcopy
OBJDUMP :=	arm-none-eabi-objdump


.PHONY:  all
all: program.dis program.bin

#
# -S:  output assembly file
# -g:  Keep debug information
# -O0:  Optimization level 0
main.s:  main.c
	$(CC) -g -O0 -S main.c --specs=nosys.specs 

# -g:  Keep debug information
# -c:  output linkable binary file
main.o: main.s
	$(AS) main.s -o main.o 
	#CAN ALSO USE
	#$(CC) -c main.s  

# 
# skip the assembly step
foo.o: foo.c
	$(CC) -g -c foo.c > foo.o 

program.elf:  main.o foo.o 
	# Should work, but require too much extra stuff
	#$(LD) main.o foo.o -o program.elf
	# so we let gcc/clang do it for us
	$(CC) main.o foo.o -o program.elf --specs=nosys.specs

program.bin:  program.elf
	$(OBJCOPY) -O binary program.elf program.bin

program.dis:  program.elf
	$(OBJDUMP) -DS program.elf > program.dis

.PHONY: clean
clean:
	rm -rf main.s main.o foo.o program.elf program.dis
	rm -rf program.bin 
